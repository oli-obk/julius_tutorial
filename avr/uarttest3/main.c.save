#include <avr/io.h>
#include <stdlib.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <uart.h>
#include <uart.c>
#define GETREG(REG_NAME, REG_BIT) (REG_NAME & (1 << REG_BIT))
#define CLRREG(REG_NAME, REG_BIT) (REG_NAME &= ~(1 << REG_BIT))
#define SETREG(REG_NAME, REG_BIT) (REG_NAME |= (1 << REG_BIT))
#define CNGREG(REG_NAME, REG_BIT) (REG_NAME ^= (1 << REG_BIT))


#ifndef F_CPU
#define F_CPU 8000000         //3686400
#endif

#define UART_BAUD_RATE 9600

void turnledon(void)

{
        SETREG(DDRA, PA0);
        SETREG(PORTA, PA0);
}


int main()
{

        /*
         * Intialize UART library, pass baudrate and AVR cpu clock
         * with macro
         * UART_BAUD_SELECT() (normal speed mode)
         * of
         * UART_BAUD_SELECT_DOUBLE_SPEED() (double speed mode)
         */
        uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );

        /*
         * now enable interrupt, since UART library is interrupt controlled
         */

        sei();

        /*
         * transmit string to uart
         * the string is buffered by the uart library is a circular buffer
         * and one character at a time is transmitted to the UART using interrupts.
         * uart_puts() blocks if it can not write the whole string to the circular
         * buffer
         */

        int comandcount = 0;

        char comandtest [] = "test";
        char c;

        while(1) {
                c = uart_getc();
                if (c & UART_NO_DATA ) {
                        /*
                         * no data available from UART
                         */
                } else {
                        /*
                         * new data available from UART
                         * check for Frame or Overrun error
                         */
                        if ( c & UART_FRAME_ERROR ) {
                                /* Framing Error detected, i.e no stop bit detected */
                                uart_puts_P("UART Frame Error: ");
                        }
                        if ( c & UART_OVERRUN_ERROR ) {
                                /*
                                 * Overrun, a character already present in the UART UDR register was
                                 * not read by the interrupt handler defore the next character arrived,
                                 * one or more received characters have been dropped
                                 */
                                uart_puts_P("UART Overrun Error: ");
                        }
                        if ( c & UART_BUFFER_OVERFLOW ) {
                                /*
                                 * We are not reading the receive buffer fast enough,
                                 * one or more received characters have been dropped
                                 */
                                uart_puts_P("Buffer overflow error: ");
                        }
                        /* check if transcived is an command
                         */


                        if ( c == comandtest [comandcount] ) {
                                comandcount++;
                        }

                        if ( comandcount == 4 ) {
                                turnledon();
                        }

                }
        }
        return 0;


}
